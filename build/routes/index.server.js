'use strict';

function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
Promise.resolve();
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots, context) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(context || (parent_component ? parent_component.$$.context : [])),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, $$slots, context);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}

/* src\components\chat.svelte generated by Svelte v3.44.1 */

const css = {
	code: "@import url(\"https://fonts.googleapis.com/css2?family=Rubik:wght@300&display=swap\");h1.svelte-1oogwnu{font-size:64px}",
	map: "{\"version\":3,\"file\":\"chat.svelte\",\"sources\":[\"chat.svelte\"],\"sourcesContent\":[\"<script>\\r\\n    let username = \\\"Guest\\\";\\r\\n    let newMessage = \\\"\\\";\\r\\n    let chatHistory = [];\\r\\n</script>\\r\\n\\r\\n<style>@import url(\\\"https://fonts.googleapis.com/css2?family=Rubik:wght@300&display=swap\\\");\\nh1 {\\n  font-size: 64px;\\n}</style>\\r\\n\\r\\n<h1>CHAT</h1>\"],\"names\":[],\"mappings\":\"AAMO,QAAQ,IAAI,sEAAsE,CAAC,CAAC,AAC3F,EAAE,eAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACjB,CAAC\"}"
};

const Chat = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	$$result.css.add(css);
	return `<h1 class="${"svelte-1oogwnu"}">CHAT</h1>`;
});

/* src\routes\index.svelte generated by Svelte v3.44.1 */

const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `${validate_component(Chat, "Chat").$$render($$result, {}, {}, {})}`;
});

module.exports = Routes;
